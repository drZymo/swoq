using Swoq.Infra;
using Swoq.Interface;
using Swoq.Server;

namespace Swoq.Test;

[TestFixture]
public class RandomStableTests
{
    private MapGenerator mapGenerator;

    [SetUp]
    public void Setup()
    {
        mapGenerator = new();
    }

    [Test]
    public void RandomSeedIsStableOverTime()
    {
        var random = new Random(42);
        var map = mapGenerator.Generate(20, 48, 64, random);
        var game = new Game(map, Parameters.MaxQuestInactivityTime, Parameters.MaxLevelTicks, Parameters.MaxLevelDuration, random);

        // These actions have been recorded by playing with the Python bot and recording all actions that resulted in 'OK' response.
        // The GameServer class was adapted to always use random seed 42 before each map was generated.
        (int a1, int a2)[] actions = [(3, 3), (2, 2), (3, 2), (3, 1), (2, 0), (2, 0), (2, 0), (2, 0), (2, 3), (2, 2), (2, 2), (2, 2), (3, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 4), (0, 4), (0, 3), (0, 3), (2, 3), (2, 3), (2, 3), (2, 3), (2, 3), (2, 0), (2, 3), (2, 3), (2, 3), (2, 3), (2, 3), (3, 3), (3, 3), (3, 0), (2, 3), (3, 3), (1, 3), (1, 3), (1, 3), (2, 3), (2, 4), (2, 3), (2, 3), (2, 3), (1, 2), (2, 3), (1, 3), (3, 3), (3, 3), (2, 3), (2, 3), (2, 3), (2, 3), (2, 0), (2, 3), (2, 0), (2, 1), (2, 2), (2, 2), (2, 2), (3, 1), (2, 2), (2, 1), (2, 1), (2, 1), (2, 2), (2, 3), (2, 0), (2, 3), (3, 3), (3, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (1, 2), (2, 2), (2, 2), (2, 2), (1, 0), (1, 3), (3, 2), (3, 2), (3, 2), (3, 2), (3, 2), (3, 3), (3, 2), (2, 2), (3, 2), (3, 2), (3, 2), (3, 1), (3, 2), (3, 2), (3, 1), (6, 1), (6, 1), (6, 1), (6, 3), (1, 3), (4, 3), (1, 3), (1, 3), (1, 3), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (3, 2), (3, 2), (3, 2), (4, 2), (4, 3), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (1, 0), (1, 1), (4, 2), (4, 1), (4, 1), (4, 1), (4, 1), (1, 4), (4, 4), (3, 4), (3, 1), (1, 1), (1, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 4), (2, 4), (2, 1), (2, 1), (2, 2), (2, 1), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 6), (2, 6), (2, 6), (2, 6), (2, 3), (2, 3), (1, 3), (1, 3), (1, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (1, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 0), (4, 4), (4, 4), (4, 3), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 0), (3, 4), (3, 1), (4, 4), (3, 0), (3, 4), (3, 4), (3, 4), (3, 3), (3, 3), (3, 2), (3, 2), (4, 2), (3, 2), (1, 1), (1, 2), (1, 1), (1, 8), (1, 0), (1, 8), (1, 1), (1, 3), (1, 2), (1, 2), (1, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (2, 2), (6, 2), (6, 2), (1, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (1, 2), (4, 2), (4, 6), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 2), (4, 3), (4, 3), (1, 4), (4, 4), (4, 3), (4, 3), (4, 3), (8, 3), (2, 8), (2, 8), (2, 8), (2, 1), (3, 1), (3, 1), (2, 1), (2, 2), (2, 2), (2, 2), (2, 1), (2, 1), (2, 1), (2, 1), (2, 4), (2, 4), (3, 1), (2, 0), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 4), (2, 1), (2, 1), (2, 0), (2, 1), (2, 0), (2, 1), (2, 1), (2, 1), (4, 1), (4, 1), (4, 3), (4, 3), (1, 3), (4, 1), (4, 1), (4, 1), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 0), (1, 1), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (4, 4), (0, 4), (0, 1), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 0), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 4), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (2, 3), (3, 3), (3, 3), (3, 3), (1, 1), (1, 1), (2, 1), (2, 1), (2, 0), (2, 1), (1, 1), (4, 1), (4, 1), (4, 1), (4, 2), (4, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 3), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 3), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 3), (0, 2), (0, 2), (0, 0), (0, 2), (0, 2), (0, 2), (0, 3), (0, 3), (2, 3), (3, 3), (2, 2), (2, 0), (2, 2), (2, 2), (2, 2), (2, 3), (2, 3), (2, 3), (2, 3), (2, 3), (3, 3), (2, 3), (2, 3), (2, 3), (2, 3), (2, 2), (2, 3), (2, 3), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 1), (2, 0), (2, 4), (2, 4), (3, 4), (2, 4), (2, 0), (2, 4), (2, 4), (2, 4), (2, 4), (2, 4), (2, 4), (3, 4), (2, 4), (2, 1), (2, 2), (2, 2), (2, 2), (3, 2), (3, 2), (3, 2), (3, 0), (2, 2), (2, 2), (2, 0), (2, 2), (3, 2), (3, 4), (3, 0), (3, 4), (4, 4), (4, 4), (4, 8), (4, 8), (4, 8), (4, 4), (3, 2), (3, 3), (2, 4), (2, 4), (2, 4), (2, 4), (2, 4), (2, 4), (3, 4), (3, 4), (3, 4), (3, 0), (2, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 4), (3, 2), (3, 2), (3, 2), (3, 2), (3, 2), (2, 2), (2, 2), (6, 2), (2, 2), (2, 2), (0, 0), (0, 2), (0, 2), (0, 3), (0, 3), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 0), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 2), (0, 3), (0, 3), (0, 3), (0, 3), (0, 2), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 3), (0, 2), (0, 2), (0, 2), (0, 2)];

        // All actions should be reproduceable without throwing
        GameState? state = game.State;
        foreach (var (a1, a2) in actions)
        {
            game.Act(a1 != 0 ? (DirectedAction)a1 : null, a2 != 0 ? (DirectedAction)a2 : null);
            state = game.State;
        }
        Assert.That(state, Is.Not.Null);
        Assert.That(state.Status, Is.EqualTo(GameStatus.FinishedSuccess));
    }
}
