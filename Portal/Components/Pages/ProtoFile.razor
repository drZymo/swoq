@page "/proto/"

@using Swoq.Data
@using System.Text.RegularExpressions

@inject IWebHostEnvironment webHostEnvironment
@inject IJSRuntime JSRuntime

@if (CurrentUserProvider?.User == null)
{
	<PageTitle>SWOQ -  Proto file</PageTitle>

	<h1>No access!</h1>

	<p>This page is only accessible for logged in users. Please <a href="login">login</a> first.</p>
}
else
{
	<PageTitle>SWOQ - Proto file - @CurrentUserProvider?.Name</PageTitle>

	<h1>Proto file</h1>

	<p>This is the proto file that defines the gRPC protocol to communicate with the server. See <NavLink href="doc">Documentation</NavLink> for more information on how to use it, </p>

	<pre class="code"><code class="language-protobuf">@GetFileContent(CurrentUserProvider?.Level ?? 0)</code></pre>
}

@code {
	[CascadingParameter]
	private CurrentUserProvider? CurrentUserProvider { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		// Make sure syntax highlighting is updated after every render
		await JSRuntime.InvokeVoidAsync("hljs.highlightAll");
	}

	string GetFileContent(int level)
	{
		var LevelPattern = new Regex(@"^\s*// Level (\d+) and higher:$");
		var EndOfBlockPattern = new Regex(@"^\s*\}$");
		try
		{
			// Read full proto file
			var path = Path.Combine(webHostEnvironment.WebRootPath, "swoq.proto");
			var lines = File.ReadAllLines(path);

			// Filer out all lines of too high levels
			var filtered = new List<string>();
			bool hide = false;
			foreach (var line in lines)
			{
				if (!hide)
				{
					// Check if line defines level
					var match = LevelPattern.Match(line);
					if (match.Success)
					{
						var lineLevel = int.Parse(match.Groups[1].Value);

						// Level too high, then hide from here
						if (lineLevel > level) hide = true;
					}
				}
				else if (EndOfBlockPattern.Match(line).Success)
				{
					// Stop hiding at end of a block (i.e. }).
					hide = false;
				}

				if (!hide)
				{
					filtered.Add(line);

					if (filtered.Count >= 2)
					{
						// Remove empty blocks (i.e. enums)
						if (filtered[^2].EndsWith("{") && filtered[^1].StartsWith("}"))
						{
							filtered = filtered[..^2];
						}
						// Remove second consecutive white line
						if (string.IsNullOrWhiteSpace(filtered[^2]) && string.IsNullOrWhiteSpace(filtered[^1]))
						{
							filtered = filtered[..^1];
						}
					}
				}
			}

			return string.Join("\n", filtered);
		}
		catch
		{
			return "Proto file could not be loaded!";
		}
	}
}
