@page "/user/"

@rendermode InteractiveServer

@using Swoq.Data

@inject ISwoqDatabase Database
@inject NavigationManager NavigationManager
@inject UserService UserService

@if (CurrentUser == null)
{
	<PageTitle>User</PageTitle>

	<h1>User</h1>

	<p>Please sign in with your user ID.</p>

	<p>If you do not have a user ID yet, then <NavLink href="register">register here</NavLink> first.</p>

	<form method="post" @onsubmit="Submit" @formname="signin-plain-form">
		<AntiforgeryToken />
		<div>
			<label>
				User ID:
				<InputText @bind-Value="LoginUserId" />
			</label>
		</div>
		<div>
			<button type="submit">Submit</button>
		</div>
	</form>
}
else
{
	<PageTitle>User - @CurrentUser.Name</PageTitle>

	<h1>Hi @CurrentUser.Name</h1>

	@if (Welcome)
	{
		<div class="alert alert-success" role="alert">
			Welcome. Your user ID is: <b>@CurrentUser.Id</b>
		</div>
	}

	<p>Current level: @CurrentUser.Level (reached in @CurrentUser.QuestLengthTicks ticks)</p>

	<ProtoFile Level="CurrentUser.Level" />
}

@code {
	[SupplyParameterFromQuery]
	public bool Welcome { get; set; } = false;

	public Swoq.Data.User? CurrentUser { get; set; } = null;

	private bool _hasRendered = false;
	private string? _tempLoginUserId;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && !_hasRendered)
		{
			_hasRendered = true;

			try
			{
				var userId = await UserService.GetUserIdAsync();
				CurrentUser = await Database.FindUserByIdAsync(userId);
				StateHasChanged();
			}
			catch
			{
				CurrentUser = null;
			}
		}

		if (_tempLoginUserId != null)
		{
			await UserService.SetUserIdAsync(_tempLoginUserId);
			CurrentUser = await Database.FindUserByIdAsync(_tempLoginUserId);
			StateHasChanged();
			_tempLoginUserId = null;
		}
	}

	[SupplyParameterFromForm]
	public string LoginUserId { get; set; } = string.Empty;

	private void Submit()
	{
		_tempLoginUserId = LoginUserId;
		StateHasChanged();
	}
}
