syntax = "proto3";

package Swoq.Interface;

enum Result {
	OK = 0;
	
	INTERNAL_ERROR = 1;
	PLAYER_ALREADY_REGISTERED = 2;
	UNKNOWN_PLAYER = 3;
	UNKNOWN_GAME_ID = 4;
	LEVEL_NOT_AVAILABLE = 5;
	MOVE_NOT_ALLOWED = 6;
	USE_NOT_ALLOWED = 7;
	UNKNOWN_ACTION = 8;
	UNKNOWN_DIRECTION = 9;
	GAME_FINISHED = 10;
	PLAYER1_NOT_PRESENT = 11;
	PLAYER2_NOT_PRESENT = 12;
	INVENTORY_FULL = 13;
	INVENTORY_EMPTY = 14;
	NO_SWORD = 15;
	PLAYER1_DIED = 16;
	PLAYER2_DIED = 17;
	UNKNOWN_QUEST_ID = 18;
}


service Player {
	rpc Register(RegisterRequest) returns (RegisterResponse) {};
}

message RegisterRequest {
	string playerName = 1;
}

message RegisterResponse {
	Result result = 1;
	optional string playerId = 2;
}


service Training {
	rpc Start(StartTrainingRequest) returns (StartResponse) {};
	rpc Act(ActionRequest) returns (ActionResponse) {};
}

service Quest {
	rpc Start(StartQuestRequest) returns (StartResponse) {};
	rpc Act(ActionRequest) returns (ActionResponse) {};
}


enum Direction {
	NORTH = 0;
	EAST = 1;
	SOUTH = 2;
	WEST = 3;
}

message Position {
	int32 x = 1;
	int32 y = 2;
}

message PlayerState {
	Position position = 1;
	int32 health = 2;
	int32 inventory = 3;
	bool hasSword = 4;
	repeated int32 surroundings = 5;
}

message State {
	bool finished = 1;
	int32 level = 2;
	optional PlayerState player1 = 3;
	optional PlayerState player2 = 4;
}

message StartTrainingRequest {
	string playerId = 1;
	int32 level = 2;
}

message StartQuestRequest {
	string playerId = 1;
}

message StartResponse {
	Result result = 1;
	optional string gameId = 2;
	optional int32 width = 3;
	optional int32 height = 4;
	optional int32 visibilityRange = 5;
	optional State state = 6;
}

enum Action {
	MOVE = 0;
	USE = 1;
}

message ActionRequest {
	string gameId = 1;
	optional Action action1 = 2;
	optional Direction direction1 = 3;
	optional Action action2 = 4;
	optional Direction direction2 = 5;
}

message ActionResponse {
	Result result = 1;
	optional State state = 2;
}
